import tkinter as tk  # For GUI
from datetime import datetime  # For date and time
import pandas as pd #For importing and exporting data
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg  #For Embedding matplotlib in tkinter
from matplotlib.figure import Figure
import matplotlib.pyplot as plt   #To create graph

#Creating Constant Global Variables
DEFAULT_INCOME_CATEGORIES = ["Salary","Business Income","Gifts","Miscellaneous"]  
DEFAULT_EXPENSE_CATEGORIES = ["Food","Travel","Education","Household","Electricity Bill","Water Bill", "Healthcare","Debt","Savings","Entertainement","Personal Care","Donations","Miscellaneous","Penalty"]
INCOME ="Income"
EXPENSE = "Expense"
FILE = "data.csv"


class Entry:
    """Creating a class for our entry similar to Table for communincation.
    id: String Sr.No. 
    date: Datetime Automatically generated by datetimemodule
    desc: String Description for Entry 
    amount:Integer  Amount of Entry
    category:String Any String 
    type:String Only Income and Expense allowed"""
    def __init__(self,id:int,desc:str,amount:int,category:str,type:str):
        self.id:str = id
        self.date:datetime = datetime.now().date()
        self.desc:str =desc
        self.amount:int = amount
        self.category:str =category
        self.type:str =type

class FileManager:
    """All the main operations of the expense manager"""
    def __init__(self,file=FILE) -> None:
        self.file=file
        self.lastwrite:datetime
        self.lastread:datetime

    def writeData(self,data:pd.DataFrame,filename:str=FILE)->None:
        """Writes Data to file and updates the pandas dataframe
        data:Entry Pass data using the Entry class object"""
        data.to_csv(filename,index=False)

    def readData(self,file:str=FILE)->pd.DataFrame:
        """Read data from file using pandas and returns a pandas dataframe object
        Also updates the index variable of the class
        file:String give path of the csv file"""
        data = pd.read_csv(file)
        return data
    
class Data:
    def __init__(self) -> None:
        self.FileManager = FileManager()
        self.data:pd.DataFrame=self.FileManager.readData()
        self.index = self.data.last_valid_index()+1

    def updateData(self,data:Entry):
        new_row = {"id":data.id,"date":data.date,"desc":data.desc,"amount":data.amount,"category":data.category,"type":data.type}
        self.data = self.data._append(new_row, ignore_index=True)
        self.index+=1
        self.FileManager.writeData(self.data)

    def getTotalIncome(self)->int:
        """Returns Total Income from all entries"""
        total_income:int = self.data.loc[self.data['type']==INCOME,'amount'].sum()
        return total_income
    
    def getTotalExpense(self)->int:
        """Returns Total Expense from all entries"""
        total_expense = self.data.loc[self.data['type']==EXPENSE,'amount'].sum()
        return total_expense
    
    def getBalance(self)->int:
        """Returns the balance Income-Expense"""
        balance = self.getTotalIncome()-self.getTotalExpense()
        return balance
    
    def getAmountbyCategory(self,category:str):
        total_amount_by_category:int = self.data.loc[self.data['category']==category,'amount'].sum()
        return total_amount_by_category
        

class Gui(tk.Tk):
    """GUI Class Inheriting from Tkinter"""
    def __init__(self,data:Data):
        """Contructor for Gui 
        It created a new window and initializes its variables
        data:Data It takes a Data to read, write data and also get sum of income and expense"""
        super().__init__()
        self.title("Expense Manager")
        self.engine = data
        self.inc_name = tk.StringVar()
        self.exp_name = tk.StringVar()
        self.inc_amt = tk.IntVar()
        self.exp_amt = tk.IntVar()
        self.income_category = tk.StringVar()
        self.expense_category = tk.StringVar()
        self.income_category.set(DEFAULT_INCOME_CATEGORIES[0])    
        self.expense_category.set(DEFAULT_EXPENSE_CATEGORIES[0])    
        self.status_bar()
        self.mainframe()
        self.create_charts()
        

    def status_bar(self):
        self.statusbar = tk.Label(self,text="Welcome",bg='white')
        self.statusbar.pack(fill=tk.X)

    def update_status_text(self,text:str,color:str):
        self.statusbar.config(text=text,bg=color)
        self.update()

    def add_income(self):
        if self.inc_amt.get() <=0:
            self.update_status_text("Pls insert correct Amount","yellow")
        else:
            data = Entry(self.engine.index+1,self.inc_name.get(),self.inc_amt.get(),self.income_category.get(),INCOME)
            self.engine.updateData(data)
            self.inc_name.initialize("")
            self.inc_amt.initialize("")
            self.update_dashboard()
            self.updates_plot_charts()
            self.update_status_text("Income updated","green")
            

    def add_expense(self):
        if self.exp_amt.get() <=0:
            self.update_status_text("Pls insert correct Amount","yellow")
        else:
            data = Entry(self.engine.index+1,self.exp_name.get(),self.exp_amt.get(),self.expense_category.get(),EXPENSE)
            self.engine.updateData(data)
            self.exp_name.initialize("")
            self.exp_amt.initialize("")
            self.update_dashboard()
            self.updates_plot_charts()
            self.update_status_text("Expense updated","red")

    def _create_frame(self,header:str,name_text_var:tk.StringVar=None,amount_text_var:tk.IntVar=None,selected_category:tk.StringVar=None,category_options:list=None,function=None,full_frame:bool = False)->tk.Frame:
        display_Frame = tk.Frame(self._MainFrame,borderwidth=2, relief="solid",width=200)
        heading_Label = tk.Label(display_Frame,text=header,fg="black")
        heading_Label.pack(fill=tk.BOTH,padx=10,pady=10)
        if full_frame ==True:
            name_Label = tk.Label(display_Frame,text="Name",fg="black")
            name_Label.pack(padx=3,pady=5)
            name_Entry = tk.Entry(display_Frame,textvariable=name_text_var)
            name_Entry.pack(padx=3,pady=5)
            amount_Label = tk.Label(display_Frame,text="Amount",fg="black")
            amount_Label.pack(padx=3,pady=5)
            amount_Entry = tk.Entry(display_Frame,textvariable=amount_text_var)
            amount_Entry.pack(padx=3,pady=5)
            category_Options = tk.OptionMenu(display_Frame,selected_category,*category_options)
            category_Options.pack(padx=3,pady=5,fill = tk.X)
            submit_Button = tk.Button(display_Frame,text=f"Add {header}",command=function)
            submit_Button.pack(padx=3,pady=5,fill = tk.X)
        return display_Frame

    def mainframe(self):
        self._MainFrame = tk.Frame(self)
        self._MainFrame.pack(fill=tk.X,side=tk.TOP)
        self._create_income()
        self._create_expense()
        self._create_dashboard()
        

    def _create_income(self):
        display_Frame = self._create_frame(INCOME, self.inc_name,self.inc_amt,self.income_category,DEFAULT_INCOME_CATEGORIES,self.add_income,True)
        display_Frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    def _create_expense(self):
        display_Frame = self._create_frame(EXPENSE, self.exp_name,self.exp_amt,self.expense_category,DEFAULT_EXPENSE_CATEGORIES,self.add_expense,True)
        display_Frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        

    def _create_dashboard(self):
        display_Frame = self._create_frame("Dashboard",full_frame=False,)
        display_Frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.Income_Label = tk.Label(display_Frame,text=f"Income = {self.engine.getTotalIncome()}")
        self.Income_Label.pack(padx=3,pady=5)
        self.Expense_Label = tk.Label(display_Frame,text=f"Expense = {self.engine.getTotalExpense()}")
        self.Expense_Label.pack(padx=3,pady=5)
        self.Balance_Label = tk.Label(display_Frame,text=f"Balance = {self.engine.getBalance()}")
        self.Balance_Label.pack(padx=3,pady=5)
    
    def create_charts(self):
        display_Frame = tk.Frame(self,bg="white", relief="solid",width=200)
        display_Frame.pack(fill=tk.BOTH)
        heading_Label = tk.Label(display_Frame,text="Charts",fg="black",bg='white')
        heading_Label.pack(fill=tk.X,padx=10,pady=10)
        self.bar_graph(display_Frame)
        self.bar_canvas.get_tk_widget().pack(side=tk.LEFT)
        self.income_pie_chart(display_Frame)
        self.income_pie_canvas.get_tk_widget().pack(side=tk.LEFT)
        self.expense_pie_chart(display_Frame)
        self.expense_pie_canvas.get_tk_widget().pack(side=tk.LEFT)

    
    def bar_graph(self,frame):
        self.bar_fig:Figure = Figure(figsize=(5,5), dpi=100)
        self.bar_ax = self.bar_fig.add_subplot(111)
        self.bar_canvas = FigureCanvasTkAgg(self.bar_fig,frame)
        self.plot_bar_chart()

    def plot_bar_chart(self):
        self.bar_ax.clear()
        self.bar_ax.bar(["Income", "Expense"], [self.engine.getTotalIncome(), self.engine.getTotalExpense()], color=['tab:green', 'tab:red'])
        self.bar_ax.set_ylabel("Amount")
        self.bar_ax.set_title("Income and Expense")
        self.bar_canvas.draw()

    def income_pie_chart(self,frame):
        self.income_pie_fig:Figure = Figure(figsize=(5,5), dpi=100)
        self.income_pie_ax = self.income_pie_fig.add_subplot(111)
        self.income_pie_canvas = FigureCanvasTkAgg(self.income_pie_fig,frame)
        self.plot_income_pie_chart()

    def plot_income_pie_chart(self):
        labels=[]
        sizes=[]
        for label in DEFAULT_INCOME_CATEGORIES:
            amount =self.engine.getAmountbyCategory(label)
            if amount!=0:
                sizes.append(amount)
                labels.append(label)
        self.income_pie_ax.clear()
        self.income_pie_ax.pie(sizes,labels=labels,autopct='%1.1f%%')
        self.income_pie_ax.set_title("Income")
        self.income_pie_canvas.draw()

    def expense_pie_chart(self,frame):
        self.expense_pie_fig:Figure = Figure(figsize=(5,5), dpi=100)
        self.expense_pie_ax = self.expense_pie_fig.add_subplot(111)
        self.expense_pie_canvas = FigureCanvasTkAgg(self.expense_pie_fig,frame)
        self.plot_expense_pie_chart()

    def plot_expense_pie_chart(self):
        labels=[]
        sizes=[]
        for label in DEFAULT_EXPENSE_CATEGORIES:
            amount =self.engine.getAmountbyCategory(label)
            if amount!=0:
                sizes.append(amount)
                labels.append(label)
        self.expense_pie_ax.clear()
        self.expense_pie_ax.pie(sizes,labels=labels,autopct='%1.1f%%')
        self.expense_pie_ax.set_title("Expense")
        self.expense_pie_canvas.draw()

    def update_dashboard(self):
        self.Income_Label.config(text=f"Income = {self.engine.getTotalIncome()}")
        self.Expense_Label.config(text=f"Expense = {self.engine.getTotalExpense()}")
        self.Balance_Label.config(text=f"Balance = {self.engine.getBalance()}")
        self.update()

    def updates_plot_charts(self):
        self.plot_bar_chart()
        self.plot_expense_pie_chart()
        self.plot_income_pie_chart()
    

if __name__ == "__main__":
    engine = Data()
    print(engine.data)
    root = Gui(engine)
    root.mainloop()